name: Release And Deploy

# Controls when the workflow will run
on:
  merge_group:
    branches: [ main ]
  pull_request:
    types: [ closed ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        description: Select the Environment
        options:
          - dev
          - uat
          - prod
      version:
        required: false
        type: choice
        description: Select the version
        options:
          - patch
          - skip_or_promote
          - new_release
          - breaking_change

      beta:
        required: false
        type: boolean
        description: deploy beta version on AKS
        default: false


permissions:
  packages: write
  contents: write
  issues: write
  id-token: write
  actions: read


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.get_semver.outputs.semver }}
      environment: ${{ steps.get_env.outputs.environment }}
    steps:
      - name: pull request rejected
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged != true
        run: |
          echo "❌ PR was closed without a merge"
          exit 1

      # Set Semvar
      - run: echo "SEMVER=patch" >> $GITHUB_ENV

      - if: ${{ (github.event.pull_request.merged && contains(github.event.pull_request.labels.*.name, 'skip')) }}
        run: echo "SEMVER=skip" >> $GITHUB_ENV

      - if: ${{ (github.event.pull_request.merged && contains(github.event.pull_request.labels.*.name, 'patch')) }}
        run: echo "SEMVER=patch" >> $GITHUB_ENV

      - if: ${{ (github.event.pull_request.merged && contains(github.event.pull_request.labels.*.name, 'minor')) }}
        run: echo "SEMVER=minor" >> $GITHUB_ENV

      - if: ${{ (github.event.pull_request.merged && contains(github.event.pull_request.labels.*.name, 'major')) }}
        run: echo "SEMVER=major" >> $GITHUB_ENV

      # force semver if dev, !=main or skip release
      - if: ${{ inputs.version == 'new_release' }}
        run: echo "SEMVER=minor" >> $GITHUB_ENV

      - if: ${{ inputs.version == 'breaking_change' }}
        run: echo "SEMVER=major" >> $GITHUB_ENV

      - if: ${{ github.ref_name != 'main' }}
        run: echo "SEMVER=buildNumber" >> $GITHUB_ENV

      - if: ${{ inputs.version == 'skip_or_promote' }}
        run: echo "SEMVER=skip" >> $GITHUB_ENV

      - id: get_semver
        name: Set Output
        run: echo "semver=${{env.SEMVER}}" >> $GITHUB_OUTPUT

      # Set Environment
      - run: echo "ENVIRONMENT=${{ inputs.environment }}" >> $GITHUB_ENV

      - if: ${{ inputs.environment == null }}
        run: echo "ENVIRONMENT=dev" >> $GITHUB_ENV

      - id: get_env
        name: Set Output
        run: echo "environment=${{env.ENVIRONMENT}}" >> $GITHUB_OUTPUT


  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ setup ]
    if: ${{ needs.setup.outputs.semver != 'skip' }}
    outputs:
      version: ${{ steps.bump_version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2
        with:
          token: ${{ secrets.BOT_TOKEN_GITHUB }}

      - id: get_version
        name: Get Version
        run: |
          SETUP_FILE="setup.cfg"
          CURRENT_VERSION=""
          if [[ -f "$SETUP_FILE" ]]; then
            CURRENT_VERSION=$(awk -F ' *= *' '/^\[metadata\]/{f=1} f && /^version/{print $2; exit}' setup.cfg)
          fi
          echo "version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "DEBUG: Current version from setup.cfg = ${CURRENT_VERSION}"
        shell: bash

      - name: Bump Version
        id: bump_version
        uses: actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0 # v6.3.3
        env:
          CURRENT_VERSION: ${{ steps.get_version.outputs.version }}
          SEMVER: ${{ needs.setup.outputs.semver }}
        with:
          result-encoding: string
          script: |
            var { CURRENT_VERSION, SEMVER } = process.env
            var versions = CURRENT_VERSION.replace('v','').split('.');
            
            if (${{ github.ref_name != 'main' }}) {
              var branch = "${{github.ref_name}}"
            }
            
            var v0 = versions[0] ?? '0';
            var v1 = versions[1] ?? '0';
            var vaux = (versions[2] ?? '0');
            var v2 = vaux.split('-')[0] ?? '0';
            var v3 = vaux.split('-')[1] ?? '0';
            
            var major = parseInt(v0) || 0;
            var minor = parseInt(v1) || 0;
            var patch = parseInt(v2) || 0;
            var buildNumber = parseInt(v3) || 0;
            
            var newVersion = "";
            
            if (SEMVER == 'major'){
              newVersion = (major + 1) + '.0.0' 
            }
            if (SEMVER == 'minor'){
              newVersion = major.toString() + '.' + (minor + 1) + '.0' 
            } 
            if (SEMVER == 'patch'){
              newVersion = major.toString() + '.' + minor.toString() + '.' + (patch + 1)
            }
            if (SEMVER == 'buildNumber'){
              newVersion = major.toString() + '.' + minor.toString() + '.' + patch.toString() + '-' + (buildNumber + 1) + '-' + branch
            }
            if (SEMVER == 'skip'){
              newVersion = CURRENT_VERSION
            }
            console.log('new version: ' + newVersion);
            echo "new_version=newVersion" >> $GITHUB_OUTPUT

      - name: Update Version
        shell: bash
        run: |
          echo "DEBUG: Updating setup.cfg with version ${{ steps.bump_version.outputs.new_version }}"
          sed -i "/^\[metadata\]/,/^\s*\[/{s/^\(version\s*=\s*\).*/\1${{ steps.bump_version.outputs.new_version }}/}" setup.cfg

      - name: Helm Bump
        uses: pagopa/github-actions-template/helm-bump@main
        with:
          version: ${{ steps.bump_version.outputs.new_version }}
          beta: ${{ inputs.beta }}

      - name: Update Openapi/Swagger Version
        if: ${{ inputs.semver != 'skip' }}
        shell: bash
        run: |
          echo "📑 Bump Openapi Version to ${{ steps.bump_version.outputs.new_version }}"

          for i in infra/api/v1/openapi/*.json; do
            [ -f "$i" ] || break
            cat <<< "$(jq ".info.version = \"${{ steps.bump_version.outputs.new_version }}\"" "$i")" > "$i"
            git add $i
          done
          for i in openapi/*.yaml; do
            [ -f "$i" ] || break
            yq -i ".info.version = \"${{ steps.bump_version.outputs.new_version }}\"" "$i"
            git add "$i"
          done
          for i in openapi/*.yml; do
            [ -f "$i" ] || break
            yq -i ".info.version = \"${{ steps.bump_version.outputs.new_version }}\"" "$i"
            git add "$i"
          done

      - name: Push New Version ${{ steps.bump_version.outputs.new_version }}
        shell: bash
        run: |
          git add -A
          git config --global user.email "github-bot@pagopa.it"
          git config --global user.name "pagopa-github-bot"
          git commit -m "Bump to version ${{ steps.bump_version.outputs.new_version }}" || exit 0
          git push origin ${{ github.ref_name}}

      - name: Create Release
        uses: ncipollo/release-action@a2e71bdd4e7dab70ca26a852f29600c98b33153e # v1.12.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ steps.bump_version.outputs.new_version }}
          name: Release ${{ steps.bump_version.outputs.new_version }}
          makeLatest: true
          generateReleaseNotes: true
          commit: ${{ (needs.setup.outputs.semver != 'skip' && github.ref_name) || '' }}

  image:
    needs: [ setup, release ]
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.semver != 'skip' }}
    steps:
      - name: Build and Push
        uses: pagopa/github-actions-template/ghcr-build-push@d91a1fd0b913c9830589be5d86cdb71c90813fae # v1.5.4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.release.outputs.version }}

  deploy_aks:
    name: Deploy on AKS
    needs: [ setup, release, image ]
    if: ${{ always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
    uses: ./.github/workflows/deploy_with_github_runner.yml
    with:
      environment: ${{ needs.setup.outputs.environment }}
    secrets: inherit

  notify:
    needs: [ setup, release, deploy_aks ]
    runs-on: ubuntu-latest
    name: Notify
    if: always()
    steps:
      - name: Report Status
        if: ${{ needs.setup.outputs.environment == 'prod' }}
        uses: ravsamhq/notify-slack-action@be814b201e233b2dc673608aa46e5447c8ab13f2 # v2
        with:
          status: ${{ needs.deploy_aks.result }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: 'New Release on Production ${{ needs.release.outputs.version }} has {status_message}'
          message_format: '{emoji} <{run_url}|{workflow}> {status_message} in <{repo_url}|{repo}>'
          footer: 'Linked to <{workflow_url}| workflow file>'
          icon_success: ':white_check_mark:'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_DEPLOY }}